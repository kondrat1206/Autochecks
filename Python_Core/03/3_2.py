"""Велику гнучкість функціям надає той факт, що вони можуть приймати аргументи через передачу їм значень у круглих дужках. При виклику функції значеннями цих аргументів ініціалізуються змінні параметрів. Параметри прописуються в круглих дужках при оголошенні функції. Кількість параметрів визначає кількість аргументів, які передаються під час виклику функції.

Як приклад, напишемо свою функцію отримання квадратного кореня числа

def sqrt(a):
    return a ** 0.5


print(sqrt(16))  # 4
Для повернення значення з функції ми використали ключове слово return, після якого йде саме значення. Дійшовши до інструкції з return, функція миттєво припиняє своє виконання, і керування передається інструкції, наступній відразу за викликом функції.

Значення, що повертається можна присвоїти змінній

def sqrt(a):
    return a ** 0.5


variable = sqrt(16)
Якщо функція не повертає результату, використання ключового слова return необов'язково. Але можна використати слово return без наступного значення, щоб перервати виконання функції на якомусь моменті. Мало того, return можна використовувати багаторазово в будь-якій функції. Вихід із подібної функції відбудеться після досягнення першого return."""


"""Нехай нам необхідно створити розсилку запрошень на якийсь захід. Повідомлення для кожного учасника однакове, нам необхідно міняти лише ім'я запрошеного. Цілком очевидно, що для формування такого повідомлення краще використовувати функцію. Створіть функцію invite_to_event, яка приймає ім'я запрошеного username і повертатиме наступний f-рядок:

"Dear {username}, we have the honour to invite you to our event"."""


username = 'Vasya'

def invite_to_event(username):
    message = f"Dear {username}, we have the honour to invite you to our event"
    return message

invite_to_event(username)
