"""Зі здешевленням використання пам'яті техніка рекурсії стала досить популярна у програмуванні. Рекурсією ми називаємо технологію виклику функцією самої себе. Така функція називається рекурсивною. Оскільки в описі функції існує вказівка на саму себе, їй необхідно дійти підсумкового рішення, інакше ми отримаємо нескінченний виклик. Тому рекурсивна функція повинна хоча б один раз досягти кінцевого результату без виклику самої себе. Цей метод називають базовим випадком (base case), інші варіанти, у яких функція звертається сама до себе, називаються рекурсивними випадками (recursive case).

Де рекурсія може знадобитись? На практиці рекурсію застосовують, коли стикаються, наприклад, з деревоподібними структурами даних: обхід каталогів на диску, низхідний спосіб граматичного аналізу компілятора мови програмування. Для пояснення рекурсії використовують простіші приклади: підрахунок чисел Фібоначчі або розрахунок факторіала і т.і. Не порушуватимемо традицій навчання та розберемо рекурсію на прикладі факторіала.

Нагадаємо, що факторіал це функція, визначена на множині додатних цілих чисел.

n! = 1 · 2 · ... · n

0! = 1

Приклад:

# Обчислюємо факторіал числа n за допомогою рекурсії
# @param n – число, для якого треба розрахувати факторіал
# @return - факторіал числа n
def factorial(n):
    if n < 2:
        return 1  # Базовий випадок
    else:
        return n * factorial(n - 1)  # Рекурсивний випадок


num = int(input("Введіть додатне ціле число: "))
result = factorial(num)
print(f"Факторіал числа {num} дорівнює {result}")
За допомогою оператора if ми визначаємо з яким випадком маємо справу – з базовим чи рекурсивним. У базовому випадку ми повертаємо 1, і функція не викликає саму себе. У else відбувається рекурсивний випадок, і функція викликається повторно зі зменшеним аргументом (n – 1).

Повернене з рекурсії значення множиться на n. У результаті ми маємо отримати факторіал числа n, який і буде повернений як результат функції factorial."""


"""Ми проводимо розіграш призів серед перших 50 підписників ютуб-каналу. Ми маємо 7 призів для розіграшу. Може виникнути питання, скільки різних списків переможців ми можемо отримати під час розіграшу? Для цього ми будемо використовувати формулу сполучень без повторень

Cnk = n! / ((n - k)! · k!)

де n — це загальна кількість людей (випадків), а k — кількість людей, які отримали призи.

Напишіть функцію number_of_groups, яка приймає параметри n та k, і за допомогою функції factorial повертає нам скільки різних списків переможців ми можемо отримати при розіграші

Зверніть увагу на те, які великі значення ми отримуємо для факторіала. Рекурсивні висловлювання треба завжди застосовувати з обережністю при обчисленнях, щоб не отримати переповнення пам'яті."""


def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)


def number_of_groups(n, k):
    result = int(factorial(n)/(factorial(n - k) * factorial(k)))
    return result

result1 = number_of_groups(10, 10)
print(result1)
    
    
    
    