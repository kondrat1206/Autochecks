"""Рядок – це послідовність символів. Найчастіше рядки – це просто деякі набори слів

Щоб створити змінну типу "рядок", необхідно певний набір символів укласти в лапки.

Одинарні лапки (апостроф) 'some text'
Подвійні лапки "some text".
Різні варіанти використання лапок обумовлені тим, що при використанні одинарних лапок можна в рядку вказати подвійні лапки та навпаки.

Рядок — це впорядкована послідовність і це значить, що до елемента рядка можна звертатися за індексом.

Рядки — незмінні. Це означає, що після створення рядка його більше не можна змінювати. На перший погляд, це може здатися недоліком, але насправді це не так. Згодом на прикладі різних програм ми побачимо, чому це не є обмеженням.

Методи рядків

Для того, щоб перетворити перший символ кожного слова в рядку до верхнього регістру, треба використати метод title.

name = "avril lavigne"
print(name.title())  # Avril Lavigne
Щоб усі літери рядка перевести у верхній регістр, використовується метод upper:

name = "avril lavigne"
print(name.upper())  # AVRIL LAVIGNE
Для переведення в нижній регістр використовується метод lower:

name = "Avril Lavigne"
print(name.lower())  # avril lavigne
Щоб перевірити, що рядок починається з підрядка, є метод startswith:

name = "Avril Lavigne"
print(name.startswith('Av'))  # True
Щоб перевірити, що рядок закінчується підрядком, використовується метод endswith:

pic = "hello.jpg"
print(pic.endswith("jpg"))  # True
Щоб видалити пропуски біля правого краю рядка, використовують метод rstrip:

name = "Avril Lavigne        "
print(name.rstrip())  # Avril Lavigne
Щоб видалити пропуски біля лівого краю рядка, використовують метод lstrip:

name = "         Avril Lavigne"
print(name.lstrip())  # Avril Lavigne
Щоб видалити пропуски з обох боків рядка, використовують метод strip:

name = "         Avril Lavigne          "
print(name.strip())  # Avril Lavigne"""


"""Браузер Chrome пропонує нам згенеровані випадкові паролі для сайтів та вебзастосунків. Ми потренуємось розв'язувати подібні завдання. Розіб'ємо завдання на три етапи. Перший етап — створіть функцію get_random_password, яка буде генерувати випадковий рядок пароля.

Вимоги:

у пароля має бути 8 символів.
для шифрування пароля будемо використовувати наступний набір символів:
()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
Ці символи лежать у межах від 40 до 126 коду в таблиці ASCII включно, і доступ до них можна отримати за допомогою функції chr.

chr(40)  # (
chr(126)  # ~
Щоб отримати випадкове ціле значення із заданого діапазону, ми використовуємо стандартний модуль Python random та його функцію randint. Вона має виклик виду randint(A, B) і повертає випадкове ціле число N, A ≤ N ≤ B.

from random import randint

random_num = randint(40, 126)
Після виконання коду в змінній random_num буде знаходитися випадкове ціле число від 40 до 126 включно.

Таким чином функція get_random_password має випадковим чином вибрати із запропонованого діапазону 8 символів та повернути згенерований пароль у вигляді рядка."""


from random import randint



def get_random_password():
    password = ''
    pass_lenth = 8
    for i in range(0, pass_lenth):
        password += str(chr(randint(40, 126)))

    print(password)
    return password

get_random_password()