"""Списки, кортежі, словники, множини та рядки (з останніми двома ми розберемося трохи далі) об'єднуються в одну групу — колекції, тому що у них є спільні властивості:

перевірка на входження — це перевірка приналежності (тобто висловлювання in та not in)
підрахунок кількості елементів послідовності — функція len;
можливість перебору всіх елементів циклом for.
Для рядків ми також можемо використовувати оператор in, щоб перевірити входження певних підрядків.

message = "Hello my little friend!"

print("Hello" in message)  # True
print("Hi" in message)  # False
Оператор in перевіряє, чи є необхідне значення у списку або кортежі:

num = [1, 45, 42, 13, 7, 5]

print(42 in num)  # True
print(3 in num)  # False
Для словників ми його використовуємо під час перевірки, чи є необхідний нам ключ:

user = {"name": "Alex", "surname": "Kovalenko", "age": 24}

print("age" in user)  # True
print("email" in user)  # False
Ми вже зустрічалися у завданнях попереднього модуля з функцією len. Вона застосовується для будь-якої колекції та дозволяє дізнатися кількість елементів у ній.

password = input("Password: ")
if len(password) > 12 or len(password) < 6:
    print("The password must be between 6 and 12 characters long.")
По будь-якій колекції можна пройти за допомогою циклу for, і на кожній ітерації в циклі буде отримано один з елементів цієї колекції."""


"""Є чотирикутна схема польотів дронів з координатами (0, 1, 2, 3). У нас є словник points, ключі якого — кортежі, точки польоту між координатами чотирикутника, вигляду (1, 2). Значення словника — це відстані між вказаними точками.

Приклад:

points = {(0, 1): 2, (0, 2): 3.8, (0, 3): 2.7, (1, 2): 2.5, (1, 3): 4.1, (2, 3): 3.9}
Напишіть функцію calculate_distance, яка на вхід приймає список координат чотирикутника зі словника виду [0, 1, 3, 2, 0]. Функція повинна підрахувати, використовуючи вказаний словник, яку загальну відстань пролетить дрон, рухаючись між точками польоту.

Примітки:

коли беремо у словника points значення, у ключі кортежі завжди має бути першою координата з меншим значенням — (2, 3), але не (3, 2);
для порожнього списку та списку з однією координатою функція calculate_distance має повертати 0."""


points = {
    (0, 1): 2,
    (0, 2): 3.8,
    (0, 3): 2.7,
    (1, 2): 2.5,
    (1, 3): 4.1,
    (2, 3): 3.9,
}

coordinates = []


def calculate_distance(coordinates):
    legs = []
    for key, value in enumerate(coordinates):
        if key > 0:
            leg = [coordinates[key - 1], coordinates[key]]
            leg = tuple(sorted(leg))
            legs.append(leg)



    print(legs)
    distance = 0.0
    if len(coordinates) > 1:
        for leg in legs:
            distance += points[leg]
    else:
        distance = 0
    
    
    print(distance)
    return distance