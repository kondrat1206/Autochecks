"""Як і while, цикли for служать для повторного запуску одного і того ж блоку коду при виконанні певних умов.

Тіло циклу for виконуватиметься по разу для кожного елемента колекції. Колекція — це діапазон цілих чисел, рядок, або структури на кшталт списків.

Синтаксис оператору for наступний:

for variable in collection:
# тіло циклу
Перед кожним етапом виконання тіла циклу черговий елемент із колекції collection копіюється в variable. Ця змінна створюється для циклу for за його запуску. Змінна створюється автоматично, та будь-яке значення очищується перед запуском кожної ітерації циклу. Змінна використовується в тілі циклу так само як і будь-яка інша змінна у мові Python.

Щоб, наприклад, виконати 5 ітерацій, можна створити колекцію використовуючи функцію range. Виклик функції range(5) згенерує діапазон чисел 0, 1, 2, 3 та 4.

for variable in range(5):
    print(variable)  # 0 1 2 3 4
При передачі двох аргументів функція range поверне діапазон, що починається з першого аргументу по другий, але не включаючи його. Виклик функції range(5, 10) дасть на виході діапазон цілих чисел (5, 6, 7, 8, 9). Якщо перший аргумент буде більшим або дорівнює другому, функція range поверне порожній діапазон і цикл не буде виконуватись.

Якщо необхідно змінити крок виконання циклу з 1 на інше ціле число, його передають третім параметром range(0, 5, 2)

for variable in range(0, 5, 2):
    print(variable)  # 0 2 4
Якщо виникла потреба у дробовому кроці, краще використовувати цикл while."""


"""Рядок — це об'єкт, що ітерується, а, значить, ми можемо використовувати його в циклі for. Підрахуйте в заданому рядку message кількість входжень символу зі змінної search. Результат помістіть у змінну result."""


message = "Never argue with stupid people, they will drag you down to their level and then beat you with experience."
search = "r"
result = 0
for char in message:
    if char == search:
        result += 1
print(result)
    
        