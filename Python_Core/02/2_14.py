"""При роботі програми часто відбувається те, що ми зовсім не очікуємо: можуть ввести рядкове значення замість числового, відбутися ділення на нуль, ми можемо створити запит для читання файлу, якого не існує або він був видалений, і такі ситуації виникають у житті програміста постійно.

Всі такі помилки називаються виключеннями (exception). Стандартна поведінка програми на Python — це припинити своє виконання у разі виключень. Виключення у Python – це помилка на рівні інтерпретатора, викликана неможливістю виконати той чи інший оператор з будь-яких причин. Але програміст може запобігти такій поведінці.

Коли розробник бачить потенційно небезпечні місця в коді, він може перехопити, відповідним чином обробити виключення та запобігти аварійному завершенню програми. Для цього призначений оператор try - except.

Небезпечний код, який може викликати виникнення виключення, ми поміщаємо в блок try, за яким розташовується альтернативний блок except. Коли в блоці try виникає виключення, виконання програми негайно переноситься в відповідний блок except без виконання інструкцій, що залишилися, в блоці try. Потім йде необов'язковий блок, який починається із ключового слова else. Цей код виконається лише якщо виключень не сталося. Останнім йде необов'язковий блок коду, який починається з ключового слова finally, він виконається у будь-якому випадку, незалежно від того були помилки чи ні

try:
    num = int(input("Введіть розмір команди: "))
    award = 10000
    bonus_for_person = award / num
except ValueError:
    print("Ви ввели не число!")
except ZeroDivisionError:
    print("Ви ввели нуль учасників!")
else:
    print(f"Нагорода кожному учаснику {bonus_for_person} золота!")
finally:
    print("До побачення!")
Основні типи виключень у Python

SyntaxError — синтаксична помилка.
IndentationError — помилка, яка виникає, якщо у виділеному блоці інструкцій допущена помилка з пробілами.
TabError виникає, якщо в одному файлі використовувати пробіли та табуляції для виділення блоків інструкцій.
TypeError виникає, коли операція зі змінною цього типу неможлива.
ValueError виникає, коли тип операнда відповідний, але значення таке, що операцію неможливо виконати.
ZeroDivisionError — ділення на нуль."""


"""Ситуація проста, вам необхідно вирахувати кількість SMS, які треба надсилати в одному пакеті розсилки потенційним покупцям. Всього на день виділяється 1000 платних SMS для кампанії маркетингу pool=1000. Співробітник відділу маркетингу вводить кількість розсилок quantity, і ви обчислюєте розмір пакета chunk = pool // quantity. Опрацюйте помилку поділу на нуль."""


pool = 1000
quantity = int(input("Enter the number of mailings: "))
try:
    chunk = pool // quantity
except ZeroDivisionError:
    print('Divide by zero completed!')