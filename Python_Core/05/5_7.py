"""Метод translate у Python дозволяє замінити символ у рядку на інший з карти (таблиці) відповідності, котру можна задати. Якщо ми використовуємо словник, ми повинні використовувати ASCII коди замість символів.

Приклад:

replace_dict = {117: "o"}
txt = "sun"
print(txt.translate(replace_dict))  # son
Що сталося? Ми замінили в тексті символ "u" на символ "o". Значення 117 — це ASCII код символу 'u', яке, як знаємо, можна отримати з допомогою функції ord("u").

replace_dict = {ord("u"): "o"}
txt = "sun"
print(txt.translate(replace_dict))  # son
Таким чином translate() – метод, який повертає рядок, де деякі задані символи замінюються на символи, описані у словнику, або таблиці відображення. Якщо символ не вказано у словнику/таблиці, символ не буде замінено. Для створення таблиці відображення використовується метод maketrans.

txt = "sun"
my_table = txt.maketrans("u", "o")
print(txt.translate(my_table))  # son
Можна визначити набір для замін

txt = "sun"
my_table = txt.maketrans("nus", "mot")
print(txt.translate(my_table))  # tom
Третій параметр у таблиці зіставлення описує символи, які ви хочете видалити з рядка:

txt = "the sun"
my_table = txt.maketrans("nus", "nos", "he t")
print(txt.translate(my_table))  # son
Якщо ми збираємося транслювати кирилицю на латиницю, у нас може виникнути проблема, наприклад, при транслітерації слова "чаша", яке має бути "chasha" і має довжину на два символи більше. Використання maketrans викличе помилку. Як бути?

Для цього можна використовувати вбудовану функцію zip, яка перетворює численні об'єкти, що ітеруються в єдиний об'єкт кортежів, що ітерується, та складається з відповідних елементів:

CYRILLIC = ("а", "ч", "ш")
LATIN = ("a", "ch", "sh")

TRANSLIT_DICT = {}

for c, l in zip(CYRILLIC, LATIN):
    TRANSLIT_DICT[ord(c)] = l
    TRANSLIT_DICT[ord(c.upper())] = l.upper()

print("чаша".translate(TRANSLIT_DICT))  # chasha
print("ЧАША".translate(TRANSLIT_DICT))  # CHASHA
Так швидко можна створити словник для транслітерації. Якщо списки мають різні довжини, то функція zip припинить роботу, щойно закінчиться перший із них."""


"""Ви вже навчилися працювати з рядками глибше і тепер у вас є повний набір інструментів для обробки рядків за допомогою Python.

За допомогою функції zip, за аналогією прикладу теорії, створіть словник TRANS для транслітерації. Створюйте словник TRANS поза функцією translate

Напишіть функцію translate, яка проводить транслітерацію кириличного алфавіту на латинську.

Функція translate:

приймає на вхід рядок та повертає рядок;
проводить транслітерацію кириличних символів на латиницю;
Приклад виконання:

print(translate("Дмитро Короб"))  # Dmitro Korob
print(translate("Олекса Івасюк"))  # Oleksa Ivasyuk
Примітка: У задачі, при створенні словника TRANS, код TRANS[ord(c.upper())] = l.title() буде вважатися неправильним, а TRANS[ord(c.upper())] = l.upper() — правильним. Це компроміс, тому що в першому випадку ми враховуємо великі літери, а в другому — правильно, якщо ім'я буде все великими літерами. Щоб не ускладнювати завдання, прийнято як у документах — все ім'я друкується великими."""


CYRILLIC_SYMBOLS = "абвгдеёжзийклмнопрстуфхцчшщъыьэюяєіїґ"
TRANSLATION = ("a", "b", "v", "g", "d", "e", "e", "j", "z", "i", "j", "k", "l", "m", "n", "o", "p", "r", "s", "t", "u",
               "f", "h", "ts", "ch", "sh", "sch", "", "y", "", "e", "yu", "ya", "je", "i", "ji", "g")


TRANS = {}

for ind, i in enumerate(CYRILLIC_SYMBOLS):
    TRANS[ord(i.lower())] = TRANSLATION[ind].lower()
    TRANS[ord(i.upper())] = TRANSLATION[ind].upper()

#print(TRANS)
    
    


def translate(name):
    name = name.translate(TRANS)

    return name